import datetime as dt
import logging
import time

import requests

from dto import Message


month_names = {
    1: '—è–Ω–≤–∞—Ä—è',
    2: '—Ñ–µ–≤—Ä–∞–ª—è',
    3: '–º–∞—Ä—Ç–∞',
    4: '–∞–ø—Ä–µ–ª—è',
    5: '–º–∞—è',
    6: '–∏—é–Ω—è',
    7: '–∏—é–ª—è',
    8: '–∞–≤–≥—É—Å—Ç–∞',
    9: '—Å–µ–Ω—Ç—è–±—Ä—è',
    10: '–æ–∫—Ç—è–±—Ä—è',
    11: '–Ω–æ—è–±—Ä—è',
    12: '–¥–µ–∫–∞–±—Ä—è',
}


notf_emoji_map = {
    'cancel': 'üü¢',
    'shelling': 'üí•',
    'missile': 'üöÄ',
    'avia': '‚úà'
}


def prep_date(date: dt.datetime) -> str:
    return f'{date.day} {month_names[date.month]} {date.strftime("%Y %H:%M")}'


def prep_msg_text(msg: Message) -> str:
    text = msg.text.removeprefix('–†–°–ß–°:').lstrip().removeprefix('–í–Ω–∏–º–∞–Ω–∏–µ!').lstrip().replace('\r\n', ' ')
    notf_emoji = notf_emoji_map.get(msg.notf_type.name)
    if notf_emoji:
        text = notf_emoji + ' ' + text
    return f'{text}\n' \
           f'<i>{prep_date(msg.date)}</i>'


def prep_stat_text(date, in_stats: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    :param date: –¥–∞—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Å–æ–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    :param in_stats: —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'–í—Å—è –æ–±–ª–∞—Å—Ç—å': {'shelling': [date, ...], 'missile':  [date, ...], 'avia':  [date, ...]}, ...}
    :return: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –≤–∏–¥ 17 –º–∞—Ä—Ç–∞ 2024
    text = f'üìÜ<b> {date.day} {month_names[date.month]} {date.year}</b>\n<pre>'

    # –µ—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥ –Ω–µ –±—ã–ª–æ, —Ç–æ –æ–±–ª–µ–≥—á—ë–Ω–Ω–æ –≤–∑–¥—ã—Ö–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç
    if not in_stats:
        logging.info('Hooray! No dangerous events yesterday')
        text += '–ö —Å—á–∞—Å—Ç—å—é, –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ</pre>'
        return text

    # –ï—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ —Ç–∞–∫–∏ –±—ã–ª–∞, —Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ:
    #  —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    day_stats = {n: s for n, s in sorted(in_stats.items(), key=lambda i: i[0])}

    #  –≤—ã–Ω–æ—Å–∏–º –ø—É–Ω–∫—Ç "–í—Å—è –æ–±–ª–∞—Å—Ç—å" –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
    all_region_value = day_stats.pop('–í—Å—è –æ–±–ª–∞—Å—Ç—å', None)
    if all_region_value is not None:
        day_stats = {'–í—Å—è –æ–±–ª–∞—Å—Ç—å': all_region_value, **day_stats}

    #  –≤ –∫–∞–∂–¥–æ–º —Ä–∞–π–æ–Ω–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–≤–æ–≥–∏, —á—Ç–æ–±—ã –≤–µ–∑–¥–µ –±—ã–ª–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
    for district in day_stats.keys():
        day_stats[district] = {n: s for n, s in sorted(day_stats[district].items(), key=lambda i: i[0])}

    #  –≤ –∫–∞–∂–¥–æ–º —Ç–∏–ø–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    for district in day_stats.keys():
        for notf_type_name in day_stats[district].keys():
            day_stats[district][notf_type_name] = sorted(day_stats[district][notf_type_name])

    #  –≤—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–π–æ–Ω–∞, —á—Ç–æ–±—ã –≤—ã—Ä–æ–≤–Ω—è—Ç—å –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
    max_len = max(map(len, day_stats.keys()))

    for district, notifications in day_stats.items():
        # —Å–∫–ª–µ–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ —Ç—Ä–µ–≤–æ–≥ –≤–æ —á—Ç–æ-—Ç–æ —Ç–∏–ø–∞ üöÄ2 üí•1 ‚úà3
        text_stats = ' '.join(
            f'{notf_emoji_map[notf_type_name]}{len(dates)}'
            for notf_type_name, dates in notifications.items() if dates
        )
        # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–π–æ–Ω–∞ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
        # –∏ –ø—Ä–∏–∫–ª–µ–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ —Ç—Ä–µ–≤–æ–≥ –∏ –∂—É—Ä–Ω–∞–ª –≤—Ä–µ–º–µ–Ω–∏.
        # –ß—Ç–æ-—Ç–æ —Ç–∏–ø–∞:
        # '     –í—Å—è –æ–±–ª–∞—Å—Ç—å  üöÄ1 \n'
        # '      üöÄ –≤ 23:36 '
        date_stats = '\n'.join(
            f'{notf_emoji_map[notf_type_name]} –≤ {date.strftime("%H:%M")}'.rjust(max_len-1)  # max_len-1: üöÄ –∑–∞–Ω–∏–º–∞–µ—Ç 2 –∑–Ω–∞–∫–æ–º–µ—Å—Ç–∞
            for notf_type_name, dates in notifications.items() if dates for date in dates
        )
        text += f'{district.rjust(max_len)}  {text_stats} \n{date_stats}\n\n'
    text += '</pre>'
    return text


def send_message(text: str, token: str, chat_id: str, silent=False):
    url = f'https://api.telegram.org/bot{token}/sendMessage'
    while True:
        try:
            requests.get(url, params={
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML",
                "disable_notification": silent
            })
        except requests.exceptions.RequestException as e:
            logging.exception(f'TG sendMessage error: {e}')
            time.sleep(1)
            continue
        else:
            break
    time.sleep(1)
